// AUTOMATICALLY GENERATED BY OPENFEATURE CLI, DO NOT EDIT.
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using OpenFeature;
using OpenFeature.Model;

namespace {{ if .Params.Custom.Namespace }}{{ .Params.Custom.Namespace }}{{ else }}OpenFeatureGenerated{{ end }}
{
    /// <summary>
    /// Generated OpenFeature client for typesafe flag access
    /// </summary>
    public class GeneratedClient
    {
        private readonly IFeatureClient _client;

        /// <summary>
        /// Initializes a new instance of the <see cref="GeneratedClient"/> class.
        /// </summary>
        /// <param name="client">The OpenFeature client to use for flag evaluations.</param>
        public GeneratedClient(IFeatureClient client)
        {
            _client = client ?? throw new ArgumentNullException(nameof(client));
        }

        {{- range .Flagset.Flags }}
        /// <summary>
        /// {{ .Description }}
        /// </summary>
        /// <remarks>
        /// <para>Flag key: {{ .Key }}</para>
        /// <para>Default value: {{ .DefaultValue }}</para>
        /// <para>Type: {{ .Type | OpenFeatureType }}</para>
        /// </remarks>
        /// <param name="evaluationContext">Optional context for the flag evaluation</param>
        /// <returns>The flag value</returns>
        public async Task<{{ .Type | OpenFeatureType }}> {{ .Key | ToPascal }}Async(EvaluationContext evaluationContext = null)
        {
            return await _client.Get{{ .Type | OpenFeatureType | ToPascal }}ValueAsync("{{ .Key }}", {{ . | FormatDefaultValue }}, evaluationContext);
        }

        /// <summary>
        /// {{ .Description }}
        /// </summary>
        /// <remarks>
        /// <para>Flag key: {{ .Key }}</para>
        /// <para>Default value: {{ .DefaultValue }}</para>
        /// <para>Type: {{ .Type | OpenFeatureType }}</para>
        /// </remarks>
        /// <param name="evaluationContext">Optional context for the flag evaluation</param>
        /// <returns>The evaluation details containing the flag value and metadata</returns>
        public async Task<EvaluationDetails<{{ .Type | OpenFeatureType }}>> {{ .Key | ToPascal }}DetailsAsync(EvaluationContext evaluationContext = null)
        {
            return await _client.Get{{ .Type | OpenFeatureType | ToPascal }}DetailsAsync("{{ .Key }}", {{ . | FormatDefaultValue }}, evaluationContext);
        }
        {{ end }}

        /// <summary>
        /// Creates a new GeneratedClient using the default OpenFeature client
        /// </summary>
        /// <returns>A new GeneratedClient instance</returns>
        public static GeneratedClient CreateClient()
        {
            return new GeneratedClient(Api.GetClient());
        }

        /// <summary>
        /// Creates a new GeneratedClient using a domain-specific OpenFeature client
        /// </summary>
        /// <param name="domain">The domain to get the client for</param>
        /// <returns>A new GeneratedClient instance</returns>
        public static GeneratedClient CreateClient(string domain)
        {
            return new GeneratedClient(Api.GetClient(domain));
        }

        /// <summary>
        /// Creates a new GeneratedClient using a domain-specific OpenFeature client with context
        /// </summary>
        /// <param name="domain">The domain to get the client for</param>
        /// <param name="evaluationContext">Default context to use for evaluations</param>
        /// <returns>A new GeneratedClient instance</returns>
        public static GeneratedClient CreateClient(string domain, EvaluationContext evaluationContext)
        {
            return new GeneratedClient(Api.GetClient(domain, evaluationContext));
        }
    }
}
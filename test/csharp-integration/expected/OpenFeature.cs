// AUTOMATICALLY GENERATED BY OPENFEATURE CLI, DO NOT EDIT.
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Threading;
using OpenFeature;
using OpenFeature.Model;

namespace TestNamespace
{
    /// <summary>
    /// Generated OpenFeature client for typesafe flag access
    /// </summary>
    public class GeneratedClient
    {
        private readonly IFeatureClient _client;

        /// <summary>
        /// Initializes a new instance of the <see cref="GeneratedClient"/> class.
        /// </summary>
        /// <param name="client">The OpenFeature client to use for flag evaluations.</param>
        public GeneratedClient(IFeatureClient client)
        {
            _client = client ?? throw new ArgumentNullException(nameof(client));
        }
        /// <summary>
        /// Discount percentage applied to purchases.
        /// </summary>
        /// <remarks>
        /// <para>Flag key: discountPercentage</para>
        /// <para>Default value: 0.15</para>
        /// <para>Type: double</para>
        /// </remarks>
        /// <param name="evaluationContext">Optional context for the flag evaluation</param>
        /// <param name="options">Options for flag evaluation</param>
        /// <returns>The flag value</returns>
        public async Task<double> DiscountPercentageAsync(EvaluationContext? evaluationContext = null, FlagEvaluationOptions? options = null)
        {
            return await _client.GetDoubleValueAsync("discountPercentage", 0.15, evaluationContext, options);
        }

        /// <summary>
        /// Discount percentage applied to purchases.
        /// </summary>
        /// <remarks>
        /// <para>Flag key: discountPercentage</para>
        /// <para>Default value: 0.15</para>
        /// <para>Type: double</para>
        /// </remarks>
        /// <param name="evaluationContext">Optional context for the flag evaluation</param>
        /// <param name="options">Options for flag evaluation</param>
        /// <returns>The evaluation details containing the flag value and metadata</returns>
        public async Task<FlagEvaluationDetails<double>> DiscountPercentageDetailsAsync(EvaluationContext? evaluationContext = null, FlagEvaluationOptions? options = null)
        {
            return await _client.GetDoubleDetailsAsync("discountPercentage", 0.15, evaluationContext, options);
        }
        
        /// <summary>
        /// Controls whether Feature A is enabled.
        /// </summary>
        /// <remarks>
        /// <para>Flag key: enableFeatureA</para>
        /// <para>Default value: false</para>
        /// <para>Type: bool</para>
        /// </remarks>
        /// <param name="evaluationContext">Optional context for the flag evaluation</param>
        /// <param name="options">Options for flag evaluation</param>
        /// <returns>The flag value</returns>
        public async Task<bool> EnableFeatureAAsync(EvaluationContext? evaluationContext = null, FlagEvaluationOptions? options = null)
        {
            return await _client.GetBooleanValueAsync("enableFeatureA", false, evaluationContext, options);
        }

        /// <summary>
        /// Controls whether Feature A is enabled.
        /// </summary>
        /// <remarks>
        /// <para>Flag key: enableFeatureA</para>
        /// <para>Default value: false</para>
        /// <para>Type: bool</para>
        /// </remarks>
        /// <param name="evaluationContext">Optional context for the flag evaluation</param>
        /// <param name="options">Options for flag evaluation</param>
        /// <returns>The evaluation details containing the flag value and metadata</returns>
        public async Task<FlagEvaluationDetails<bool>> EnableFeatureADetailsAsync(EvaluationContext? evaluationContext = null, FlagEvaluationOptions? options = null)
        {
            return await _client.GetBooleanDetailsAsync("enableFeatureA", false, evaluationContext, options);
        }
        
        /// <summary>
        /// The message to use for greeting users.
        /// </summary>
        /// <remarks>
        /// <para>Flag key: greetingMessage</para>
        /// <para>Default value: Hello there!</para>
        /// <para>Type: string</para>
        /// </remarks>
        /// <param name="evaluationContext">Optional context for the flag evaluation</param>
        /// <param name="options">Options for flag evaluation</param>
        /// <returns>The flag value</returns>
        public async Task<string> GreetingMessageAsync(EvaluationContext? evaluationContext = null, FlagEvaluationOptions? options = null)
        {
            return await _client.GetStringValueAsync("greetingMessage", "Hello there!", evaluationContext, options);
        }

        /// <summary>
        /// The message to use for greeting users.
        /// </summary>
        /// <remarks>
        /// <para>Flag key: greetingMessage</para>
        /// <para>Default value: Hello there!</para>
        /// <para>Type: string</para>
        /// </remarks>
        /// <param name="evaluationContext">Optional context for the flag evaluation</param>
        /// <param name="options">Options for flag evaluation</param>
        /// <returns>The evaluation details containing the flag value and metadata</returns>
        public async Task<FlagEvaluationDetails<string>> GreetingMessageDetailsAsync(EvaluationContext? evaluationContext = null, FlagEvaluationOptions? options = null)
        {
            return await _client.GetStringDetailsAsync("greetingMessage", "Hello there!", evaluationContext, options);
        }
        
        /// <summary>
        /// Allows customization of theme colors.
        /// </summary>
        /// <remarks>
        /// <para>Flag key: themeCustomization</para>
        /// <para>Default value: map[primaryColor:#007bff secondaryColor:#6c757d]</para>
        /// <para>Type: Value</para>
        /// </remarks>
        /// <param name="evaluationContext">Optional context for the flag evaluation</param>
        /// <param name="options">Options for flag evaluation</param>
        /// <returns>The flag value</returns>
        public async Task<Value> ThemeCustomizationAsync(EvaluationContext? evaluationContext = null, FlagEvaluationOptions? options = null)
        {
            throw new NotSupportedException("Unsupported flag type");
        }

        /// <summary>
        /// Allows customization of theme colors.
        /// </summary>
        /// <remarks>
        /// <para>Flag key: themeCustomization</para>
        /// <para>Default value: map[primaryColor:#007bff secondaryColor:#6c757d]</para>
        /// <para>Type: Value</para>
        /// </remarks>
        /// <param name="evaluationContext">Optional context for the flag evaluation</param>
        /// <param name="options">Options for flag evaluation</param>
        /// <returns>The evaluation details containing the flag value and metadata</returns>
        public async Task<FlagEvaluationDetails<Value>> ThemeCustomizationDetailsAsync(EvaluationContext? evaluationContext = null, FlagEvaluationOptions? options = null)
        {
            throw new NotSupportedException("Unsupported flag type");
        }
        
        /// <summary>
        /// Maximum allowed length for usernames.
        /// </summary>
        /// <remarks>
        /// <para>Flag key: usernameMaxLength</para>
        /// <para>Default value: 50</para>
        /// <para>Type: int</para>
        /// </remarks>
        /// <param name="evaluationContext">Optional context for the flag evaluation</param>
        /// <param name="options">Options for flag evaluation</param>
        /// <returns>The flag value</returns>
        public async Task<int> UsernameMaxLengthAsync(EvaluationContext? evaluationContext = null, FlagEvaluationOptions? options = null)
        {
            return await _client.GetIntegerValueAsync("usernameMaxLength", 50, evaluationContext, options);
        }

        /// <summary>
        /// Maximum allowed length for usernames.
        /// </summary>
        /// <remarks>
        /// <para>Flag key: usernameMaxLength</para>
        /// <para>Default value: 50</para>
        /// <para>Type: int</para>
        /// </remarks>
        /// <param name="evaluationContext">Optional context for the flag evaluation</param>
        /// <param name="options">Options for flag evaluation</param>
        /// <returns>The evaluation details containing the flag value and metadata</returns>
        public async Task<FlagEvaluationDetails<int>> UsernameMaxLengthDetailsAsync(EvaluationContext? evaluationContext = null, FlagEvaluationOptions? options = null)
        {
            return await _client.GetIntegerDetailsAsync("usernameMaxLength", 50, evaluationContext, options);
        }
        

        /// <summary>
        /// Creates a new GeneratedClient using the default OpenFeature client
        /// </summary>
        /// <returns>A new GeneratedClient instance</returns>
        public static GeneratedClient CreateClient()
        {
            return new GeneratedClient(Api.Instance.GetClient());
        }

        /// <summary>
        /// Creates a new GeneratedClient using a domain-specific OpenFeature client
        /// </summary>
        /// <param name="domain">The domain to get the client for</param>
        /// <returns>A new GeneratedClient instance</returns>
        public static GeneratedClient CreateClient(string domain)
        {
            return new GeneratedClient(Api.Instance.GetClient(domain));
        }

        /// <summary>
        /// Creates a new GeneratedClient using a domain-specific OpenFeature client with context
        /// </summary>
        /// <param name="domain">The domain to get the client for</param>
        /// <param name="evaluationContext">Default context to use for evaluations</param>
        /// <returns>A new GeneratedClient instance</returns>
        public static GeneratedClient CreateClient(string domain, EvaluationContext? evaluationContext = null)
        {
            return new GeneratedClient(Api.Instance.GetClient(domain));
        }
    }
}